{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto - Plataforma de Microsservi\u00e7os","text":"<p>Este projeto \u00e9 composto por diversos microsservi\u00e7os, cada um respons\u00e1vel por uma parte da plataforma.</p>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias utilizadas","text":"<ul> <li>Spring Boot</li> <li>Spring Cloud (Feign, Gateway)</li> <li>Redis</li> <li>Docker + Docker Compose</li> <li>Jenkins</li> <li>Minikube + Kubernetes</li> <li>Prometheus + Grafana</li> </ul>"},{"location":"#estrutura-de-microsservicos","title":"Estrutura de microsservi\u00e7os","text":"<ul> <li><code>auth-service</code> \u2013 Autentica\u00e7\u00e3o de usu\u00e1rios com JWT</li> <li><code>account-service</code> \u2013 Cadastro de contas e perfis</li> <li><code>product-service</code> \u2013 Gest\u00e3o de produtos</li> <li><code>order-service</code> \u2013 Registro e consulta de pedidos</li> <li><code>gateway-service</code> \u2013 API Gateway com filtros de autentica\u00e7\u00e3o</li> </ul>"},{"location":"#video-apresentacao-microsservicos","title":"V\u00eddeo apresenta\u00e7\u00e3o microsservi\u00e7os","text":"<p>Explore os t\u00f3picos no menu para mais detalhes.</p>"},{"location":"bottlenecks/","title":"Bottlenecks Implementados","text":""},{"location":"bottlenecks/#1-caching-com-redis","title":"1. Caching com Redis","text":"<p>Aplicado no <code>product-service</code> para cachear chamadas <code>GET /product/{id}</code>.</p> <ul> <li>Reduz requisi\u00e7\u00f5es ao banco</li> <li>Ganha de performance em leitura</li> <li>Implementado com <code>@Cacheable</code></li> </ul>"},{"location":"bottlenecks/#2-observability-com-prometheus-grafana","title":"2. Observability com Prometheus + Grafana","text":"<p>Coletando m\u00e9tricas de:</p> <ul> <li>Uso de mem\u00f3ria JVM</li> <li>Total de requisi\u00e7\u00f5es</li> </ul>"},{"location":"bottlenecks/#dashboard-no-grafana-com-as-metricas","title":"Dashboard no Grafana com as m\u00e9tricas","text":""},{"location":"fluxo/","title":"Fluxo da Plataforma","text":""},{"location":"fluxo/#cenario-completo","title":"Cen\u00e1rio completo","text":"<ol> <li>Usu\u00e1rio chama <code>POST /auth/login</code> \u2192 retorna token</li> <li>Frontend envia esse token em headers para outras rotas</li> <li>O <code>gateway-service</code> intercepta, valida com <code>/auth/solve</code>, e injeta <code>id-account</code> no header</li> <li>As rotas internas (<code>/order</code>, <code>/product</code>, etc.) recebem o <code>id-account</code> e processam normalmente</li> </ol>"},{"location":"fluxo/#exemplo-de-requisicao","title":"Exemplo de requisi\u00e7\u00e3o","text":"<pre><code>GET /order/123\nAuthorization: Bearer eyJhbGciOiJI...\n</code></pre> <p>O gateway:</p> <ul> <li>Valida o token</li> <li>Chama <code>/auth/solve</code> para verificar o token</li> <li>Encaminha <code>/order/123</code> com:</li> </ul> <pre><code>id-account: abc123\n</code></pre> <p>Esse fluxo \u00e9 garantido pelos filtros globais do <code>gateway-service</code>.</p>"},{"location":"jenkins/","title":"Jenkins e CI/CD","text":"<p>Cada microsservi\u00e7o possui seu <code>Jenkinsfile</code> com as etapas de:</p> <ul> <li>Build com Maven</li> <li>Docker build + tag</li> <li>Push para reposit\u00f3rio de imagens (Docker Hub)</li> <li>Deploy via Minikube (futuramente)</li> </ul>"},{"location":"jenkins/#pipeline-exemplo","title":"Pipeline exemplo","text":"<pre><code>pipeline {\n  agent any\n  stages {\n    stage('Build') {\n      steps {\n        sh './mvnw clean package'\n      }\n    }\n    stage('Docker') {\n      steps {\n        sh 'docker build -t user/product-service .'\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"jenkins/#jenkins-funcionando","title":"Jenkins funcionando","text":""},{"location":"minikube/","title":"Deploy com Minikube","text":"<p>Este projeto tamb\u00e9m foi testado em ambiente local com Kubernetes usando o Minikube.</p>"},{"location":"minikube/#comandos-utilizados","title":"Comandos utilizados","text":"<pre><code>minikube start\nkubectl apply -f k8s/k8s.yaml\nkubectl get pods\n</code></pre>"},{"location":"minikube/#minikube-funcionando","title":"Minikube funcionando","text":""},{"location":"referencias/","title":"Refer\u00eancias e Links","text":""},{"location":"referencias/#repositorios-dos-microsservicos","title":"Reposit\u00f3rios dos microsservi\u00e7os","text":"<ul> <li>Auth</li> <li>Account</li> <li>Product</li> <li>Order</li> <li>Auth Service</li> <li>Account Service</li> <li>Product Service</li> <li>Order Service</li> <li>Exchange Service</li> <li>Gateway Service</li> </ul>"},{"location":"referencias/#documentacoes-relacionadas","title":"Documenta\u00e7\u00f5es Relacionadas","text":"<ul> <li>Spring Cloud Docs</li> <li>Micrometer</li> <li>Jenkins Pipelines</li> <li>Prometheus</li> </ul>"},{"location":"microsservicos/account/","title":"Account Service","text":""},{"location":"microsservicos/account/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Respons\u00e1vel pela cria\u00e7\u00e3o, consulta e autentica\u00e7\u00e3o de contas de usu\u00e1rios. Tamb\u00e9m faz a valida\u00e7\u00e3o de senha via hash SHA-256.</p>"},{"location":"microsservicos/account/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /account</code> \u2013 Cria uma nova conta</li> <li><code>GET /account</code> \u2013 Lista todas as contas</li> <li><code>POST /account/login</code> \u2013 Busca conta pelo email e senha</li> <li><code>GET /account/whoami</code> \u2013 Retorna informa\u00e7\u00f5es da conta autenticada</li> </ul>"},{"location":"microsservicos/account/#tecnologias","title":"Tecnologias","text":"<ul> <li>Spring Boot</li> <li>Spring Data JPA</li> <li>Flyway para versionamento do banco</li> <li>SHA-256 para hashing de senha</li> <li>CI: Jenkinsfile com <code>mvn clean package</code> e Docker build</li> </ul>"},{"location":"microsservicos/account/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>AccountService.java</code> \u2013 l\u00f3gica de cria\u00e7\u00e3o e autentica\u00e7\u00e3o</li> <li><code>AccountModel.java</code> \u2013 entidade JPA</li> <li><code>AccountRepository.java</code> \u2013 reposit\u00f3rio com Spring Data</li> <li><code>AccountResource.java</code> \u2013 REST Controller</li> <li><code>Account.java</code> \u2013 entidade de dom\u00ednio</li> </ul>"},{"location":"microsservicos/account/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio da Interface Account</p> <p>Ver reposit\u00f3rio do Account Service</p>"},{"location":"microsservicos/auth/","title":"Auth Service","text":""},{"location":"microsservicos/auth/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Respons\u00e1vel por registrar usu\u00e1rios, autenticar e emitir tokens JWT.</p>"},{"location":"microsservicos/auth/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /auth/register</code> \u2013 Cria usu\u00e1rio</li> <li><code>POST /auth/login</code> \u2013 Autentica e retorna token</li> <li><code>POST /auth/solve</code> \u2013 Decodifica token e retorna id da conta</li> </ul>"},{"location":"microsservicos/auth/#tecnologias","title":"Tecnologias","text":"<ul> <li>Spring Boot</li> <li>Feign Client (<code>AccountController</code>)</li> <li>JWT (<code>io.jsonwebtoken</code>)</li> <li>CI: Jenkinsfile com <code>mvn clean package</code> e Docker build</li> </ul>"},{"location":"microsservicos/auth/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>AuthService.java</code> \u2013 l\u00f3gica de autentica\u00e7\u00e3o</li> <li><code>JwtService.java</code> \u2013 gera\u00e7\u00e3o/valida\u00e7\u00e3o de token</li> <li><code>AuthResource.java</code> \u2013 REST Controller</li> </ul>"},{"location":"microsservicos/auth/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio da Interface Auth</p> <p>Ver reposit\u00f3rio do Auth Service</p>"},{"location":"microsservicos/exchange/","title":"Exchange Service","text":""},{"location":"microsservicos/exchange/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Respons\u00e1vel por retornar a taxa de c\u00e2mbio entre duas moedas, consumindo a API p\u00fablica da AwesomeAPI e associando a solicita\u00e7\u00e3o a um <code>id-account</code> extra\u00eddo do cabe\u00e7alho da requisi\u00e7\u00e3o.</p>"},{"location":"microsservicos/exchange/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /exchange/{currency1}/{currency2}</code> \u2013 Retorna as cota\u00e7\u00f5es de compra (<code>buy</code>) e venda (<code>sell</code>), a data/hora atual e o <code>id-account</code> informado no header.</li> </ul>"},{"location":"microsservicos/exchange/#exemplo-de-request","title":"Exemplo de Request","text":"<pre><code>GET /exchange/USD/BRL HTTP/1.1\nHost: exchange:8000\nid-account: &lt;uuid&gt;\n</code></pre>"},{"location":"microsservicos/exchange/#exemplo-de-response","title":"Exemplo de Response","text":"<pre><code>{\n  \"sell\": \"5.1234\",\n  \"buy\": \"5.0987\",\n  \"date\": \"2025-06-04T14:23:45.123456\",\n  \"id-account\": \"&lt;uuid&gt;\"\n}\n</code></pre>"},{"location":"microsservicos/exchange/#tecnologias","title":"Tecnologias","text":"<ul> <li>FastAPI \u2013 framework web para criar endpoints REST.</li> <li>requests \u2013 biblioteca para chamadas HTTP \u00e0 API externa.</li> <li>Python datetime \u2013 para obter timestamp da resposta.</li> </ul>"},{"location":"microsservicos/exchange/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>main.py</code> \u2013 define o endpoint <code>/exchange/{currency1}/{currency2}</code> e a l\u00f3gica de consumo da API externa..</li> <li><code>requirements.txt</code> \u2013 lista de depend\u00eancias do projeto</li> </ul>"},{"location":"microsservicos/exchange/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio do Exchange Service</p>"},{"location":"microsservicos/gateway/","title":"Gateway Service","text":""},{"location":"microsservicos/gateway/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>O <code>gateway-service</code> atua como ponto de entrada central da aplica\u00e7\u00e3o. Ele valida tokens, autentica rotas e redireciona requisi\u00e7\u00f5es para os servi\u00e7os internos.</p>"},{"location":"microsservicos/gateway/#responsabilidades","title":"Responsabilidades","text":"<ul> <li>Valida\u00e7\u00e3o de token JWT via <code>/auth/solve</code></li> <li>Inje\u00e7\u00e3o de <code>id-account</code> no header</li> <li>Redirecionamento para <code>product</code>, <code>order</code>, <code>account</code> etc.</li> <li>CORS liberado para acesso do frontend</li> </ul>"},{"location":"microsservicos/gateway/#tecnologias","title":"Tecnologias","text":"<ul> <li>Spring Cloud Gateway</li> <li>Spring WebFlux</li> <li>WebClient para comunica\u00e7\u00e3o com <code>auth-service</code></li> <li>Filtro global (<code>AuthorizationFilter</code>) com l\u00f3gica customizada</li> <li>CI: Jenkinsfile com <code>mvn clean package</code> e Docker build</li> </ul>"},{"location":"microsservicos/gateway/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>AuthorizationFilter.java</code> \u2013 filtro global para autentica\u00e7\u00e3o</li> <li><code>RouterValidator.java</code> \u2013 define quais rotas s\u00e3o p\u00fablicas</li> <li><code>CorsFilter.java</code> \u2013 configura\u00e7\u00e3o de CORS</li> <li><code>GatewayResource.java</code> \u2013 endpoint de sistema <code>/info</code></li> <li><code>application.yaml</code> \u2013 configura todas as rotas</li> </ul>"},{"location":"microsservicos/gateway/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio do Gateway Service</p>"},{"location":"microsservicos/order/","title":"Order Service","text":""},{"location":"microsservicos/order/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Respons\u00e1vel pelo registro e consulta de pedidos realizados por usu\u00e1rios. Cada pedido cont\u00e9m m\u00faltiplos produtos com c\u00e1lculo de total autom\u00e1tico.</p>"},{"location":"microsservicos/order/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /order</code> \u2013 Cria um novo pedido</li> <li><code>GET /order</code> \u2013 Lista todos os pedidos</li> <li><code>GET /order/{id}</code> \u2013 Retorna os detalhes de um pedido espec\u00edfico</li> </ul>"},{"location":"microsservicos/order/#tecnologias","title":"Tecnologias","text":"<ul> <li>Spring Boot</li> <li>Spring Data JPA</li> <li>Integra\u00e7\u00e3o com <code>product-service</code> via Feign Client</li> <li>Valida\u00e7\u00e3o do <code>id-account</code> via headers (injetado pelo gateway)</li> <li>CI: Jenkinsfile com <code>mvn clean package</code> e Docker build</li> </ul>"},{"location":"microsservicos/order/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>OrderService.java</code> \u2013 l\u00f3gica de c\u00e1lculo e persist\u00eancia de pedidos</li> <li><code>OrderModel.java</code> / <code>OrderItemModel.java</code> \u2013 entidades JPA</li> <li><code>OrderRepository.java</code> / <code>OrderItemRepository.java</code> \u2013 reposit\u00f3rios</li> <li><code>OrderResource.java</code> \u2013 REST Controller</li> <li><code>OrderParser.java</code> \u2013 convers\u00e3o de entrada/sa\u00edda</li> <li><code>Order.java</code> / <code>OrderItem.java</code> \u2013 entidades de dom\u00ednio</li> </ul>"},{"location":"microsservicos/order/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio da Interface Order</p> <p>Ver reposit\u00f3rio do Order Service</p>"},{"location":"microsservicos/product/","title":"Product Service","text":""},{"location":"microsservicos/product/#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Respons\u00e1vel pelo cadastro, consulta e exclus\u00e3o de produtos. Utiliza cache com Redis para otimiza\u00e7\u00e3o de desempenho e Prometheus + Grafana para observabilidade (configurados apenas nesse microsservi\u00e7o para fins educativos, mas facilmente replic\u00e1vel nos outros microsservi\u00e7os).</p>"},{"location":"microsservicos/product/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /product</code> \u2013 Cria produto</li> <li><code>GET /product</code> \u2013 Lista todos os produtos</li> <li><code>GET /product/{id}</code> \u2013 Retorna um produto pelo ID</li> <li><code>DELETE /product/{id}</code> \u2013 Remove um produto</li> </ul>"},{"location":"microsservicos/product/#tecnologias","title":"Tecnologias","text":"<ul> <li>Spring Boot</li> <li>Spring Data JPA</li> <li>Redis + Spring Cache (<code>@Cacheable</code>)</li> <li>Prometheus + Grafana</li> <li>CI: Jenkinsfile com <code>mvn clean package</code> e Docker build</li> </ul>"},{"location":"microsservicos/product/#estrutura-de-codigo","title":"Estrutura de c\u00f3digo","text":"<ul> <li><code>ProductService.java</code> \u2013 l\u00f3gica de neg\u00f3cio com cache</li> <li><code>ProductModel.java</code> \u2013 entidade JPA</li> <li><code>ProductRepository.java</code> \u2013 reposit\u00f3rio de produtos</li> <li><code>ProductResource.java</code> \u2013 REST Controller</li> <li><code>ProductParser.java</code> \u2013 convers\u00f5es entre DTOs e entidade</li> <li><code>Product.java</code> \u2013 entidade de dom\u00ednio</li> </ul>"},{"location":"microsservicos/product/#repositorio","title":"Reposit\u00f3rio","text":"<p>Ver reposit\u00f3rio da Interface Product</p> <p>Ver reposit\u00f3rio do Product Service</p>"}]}